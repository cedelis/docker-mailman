#!/usr/bin/perl -w
# BEGIN BPS TAGGED BLOCK {{{
# 
# COPYRIGHT:
#  
# This software is Copyright (c) 1996-2005 Best Practical Solutions, LLC 
#                                          <jesse@bestpractical.com>
# 
# (Except where explicitly superseded by other copyright notices)
# 
# 
# LICENSE:
# 
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
# 
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# 
# 
# CONTRIBUTION SUBMISSION POLICY:
# 
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
# 
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
# 
# END BPS TAGGED BLOCK }}}

=head1 NAME

rt-mailgate - Mail interface to RT3.

=cut


use strict;
use Getopt::Long;
use LWP::UserAgent;

use constant EX_TEMPFAIL => 75;

my %opts;
GetOptions( \%opts, "queue=s", "action=s", "url=s", "jar=s", "help", "debug", "extension=s", "timeout=i" );

if ( $opts{help} ) {
    require Pod::Usage;
    import Pod::Usage;
    pod2usage("RT Mail Gateway\n");
    exit 1;    # Don't want to succeed if this is really an email!
}

for (qw(url)) {
    die "$0 invoked improperly\n\nNo $_ provided to mail gateway!\n" unless $opts{$_};
}

my $ua      = LWP::UserAgent->new();
$ua->cookie_jar( { file => $opts{jar} } );

my %args = (
    queue   => $opts{queue},
    action  => $opts{action},
    SessionType => 'REST',    # Surpress login box
);

# Read the message in from STDIN
$args{'message'} = do { local (@ARGV, $/); <> };

unless ( $args{message} =~ /\S/ ) {
    print STDERR "$0: no message passed on STDIN!\n";
    exit 0;
}

&check_headers();

if ($opts{'extension'}) {
        $args{$opts{'extension'}} = $ENV{'EXTENSION'};
}

# Set up cookie here.

my $full_url = $opts{'url'}. "/REST/1.0/NoAuth/mail-gateway";
warn "Connecting to $full_url" if $opts{'debug'};



$ua->timeout(exists($opts{'timeout'}) ? $opts{'timeout'} : 180);
my $r = $ua->post( $full_url, {%args} );
check_failure($r);

my $content = $r->content;
warn $content if ($opts{debug});

if ( $content !~ /^(ok|not ok)/ ) {

    # It's not the server's fault if the mail is bogus. We just want to know that
    # *something* came out of the server.
    warn <<EOF;
RT server error.

The RT server which handled your email did not behave as expected. It
said:

$content
EOF

exit EX_TEMPFAIL;

}

exit;


sub store_email_and_quit {
    use POSIX qw(strftime);
    my $datestring = strftime "%Y%m%d_%H%M%S", gmtime;
    my $rand = rand();
    my $filename = '/var/log/exim4/deferred_email/' . $args{action} . '_' . $datestring . '_' . $rand;
    open(my $fh, '>', $filename) or die;
    print $fh $args{message};
    close $fh;
    exit 0;
}


# this routine will promptly exit when it
# finds something "bad" in the email headers
sub check_headers {
   my $header = '';
   my $inx = index($args{message}, "\n\n");
   if ( $inx > 0 ) {
      $header = substr($args{message}, 0, $inx);
   } else {
      $inx = index($args{message}, "\r\n\r\n");
      if ( $inx > 0 ) {
         $header = substr($args{message}, 0, $inx);
      }
   }
   return if (length($header) <= 0);

   # if these two headers are present, we assume auto-generated out-of-office email
   # auto-submitted: auto-generated
   # X-Auto-Response-Suppress: All
   my $autoGenerated = 0;
   my $autoSuppressAll = 0;
   my $fromCARLI = 0;

   my (@lines) = split (/^/, $header);
   foreach my $l (@lines) {

      if ($l =~ /^Subject:\s(.+)/) {
        exit if ($1 =~ /out\s+of\s+office/i);
      }
 
      if ($l =~ /^Subject:\s(.+)/) {
        exit if ($1 =~ /out\s+of\s+the\s+office/i);
      }

      if ($l =~ /^From:\s(.+)/) {
         if ($1 =~ /\@uillinois.edu/i) {
           $fromCARLI = 1;
         }
          if ($l =~ /\@facebook./i) {
             exit;
          }
         if ($1 =~ /MAILER-DAEMON/) {
            exit;
         }
         if ($l =~ /postmaster/i) {
            exit;
         }
         if ($l =~ /mail.*delivery/i) {
            exit;
         }
         #temporarily don't allow .jp addresses
         if ($l =~ /[^\@]+\@.+\.jp/i) {
            exit;
         }

      }

      if ($l =~ /^auto-submitted: auto-generated/i) {
        $autoGenerated = 1;
      }

      if ($l =~ /^X-Auto-Response-Suppress: All/i) {
        $autoSuppressAll = 1;
      }

      if ($autoGenerated && $autoSuppressAll && $fromCARLI) { 
        &store_email_and_quit(); # for now, let's preserve the email; later, when we feel it's safe, we can simply exit instead
      }

   }

}

sub check_failure {
    my $r = shift;
    return if $r->is_success();

    # This ordinarily oughtn't to be able to happen, suggests a bug in RT.
    # So only load these heavy modules when they're needed.
    require HTML::TreeBuilder;
    require HTML::FormatText;

    my $error = $r->error_as_HTML;
    my $tree  = HTML::TreeBuilder->new->parse($error);
    $tree->eof;

    # It'll be a cold day in hell before RT sends out bounces in HTML
    my $formatter = HTML::FormatText->new( leftmargin  => 0,
                                           rightmargin => 50 );
    warn $formatter->format($tree);
    warn "This is $0 exiting because of an undefined server error" if ($opts{debug});
    exit EX_TEMPFAIL;
}


=head1 SYNOPSIS

    rt-mailgate --help : this text

Usual invocation (from MTA):

    rt-mailgate --action (correspond|comment|...) --queue queuename
                --url http://your.rt.server/
                [ --debug ]
                [ --extension (queue|action|ticket) ]
                [ --timeout seconds ]



See C<man rt-mailgate> for more.

=head1 OPTIONS

=over 3

=item C<--action>

Specifies what happens to email sent to this alias.  The avaliable
basic actions are: C<correspond>, C<comment>.


If you've set the RT configuration variable B<$RT::UnsafeEmailCommands>,
C<take> and C<resolve> are also available.  You can execute two or more
actions on a single message using a C<-> separated list.  RT will execute
the actions in the listed order.  For example you can use C<take-comment>,
C<correspond-resolve> or C<take-comment-resolve> as actions.

Note that C<take> and C<resolve> actions ignore message text if used
alone.  Include a  C<comment> or C<correspond> action if you want RT
to record the incoming message.

The default action is C<correspond>.

=item C<--queue>

This flag determines which queue this alias should create a ticket in if no ticket identifier
is found.

=item C<--url>

This flag tells the mail gateway where it can find your RT server. You should 
probably use the same URL that users use to log into RT.


=item C<--extension> OPTIONAL

Some MTAs will route mail sent to user-foo@host or user+foo@host to user@host
and present "foo" in the environment variable $EXTENSION. By specifying
the value "queue" for this parameter, the queue this message should be
submitted to will be set to the value of $EXTENSION. By specifying
"ticket", $EXTENSION will be interpreted as the id of the ticket this message
is related to.  "action" will allow the user to specify either "comment" or
"correspond" in the address extension.

=item C<--debug> OPTIONAL

Print debugging output to standard error


=item C<--timeout> OPTIONAL

Configure the timeout for posting the message to the web server.  The
default timeout is 3 minutes (180 seconds).


=head1 DESCRIPTION

The RT mail gateway is the primary mechanism for communicating with RT
via email. This program simply directs the email to the RT web server,
which handles filing correspondence and sending out any required mail.
It is designed to be run as part of the mail delivery process, either
called directly by the MTA or C<procmail>, or in a F<.forward> or
equivalent.

=head1 SETUP

Much of the set up of the mail gateway depends on your MTA and mail
routing configuration. However, you will need first of all to create an
RT user for the mail gateway and assign it a password; this helps to
ensure that mail coming into the web server did originate from the
gateway.

Next, you need to route mail to C<rt-mailgate> for the queues you're
monitoring. For instance, if you're using F</etc/aliases> and you have a
"bugs" queue, you will want something like this:

    bugs:         "|/opt/rt3/bin/rt-mailgate --queue bugs --action correspond
              --url http://rt.mycorp.com/"

    bugs-comment: "|/opt/rt3/bin/rt-mailgate --queue bugs --action comment
              --url http://rt.mycorp.com/"

Note that you don't have to run your RT server on your mail server, as
the mail gateway will happily relay to a different machine.

=head1 CUSTOMIZATION

By default, the mail gateway will accept mail from anyone. However,
there are situations in which you will want to authenticate users
before allowing them to communicate with the system. You can do this
via a plug-in mechanism in the RT configuration.

You can set the array C<@RT::MailPlugins> to be a list of plugins. The
default plugin, if this is not given, is C<Auth::MailFrom> - that is,
authentication of the person is done based on the C<From> header of the
email. If you have additional filters or authentication mechanisms, you
can list them here and they will be called in order:

    @RT::MailPlugins = (
        "Filter::SpamAssassin",
        "Auth::LDAP",
        # ...
    );

See the documentation for any additional plugins you have.

You may also put Perl subroutines into the C<@RT::MailPlugins> array, if
they behave as described below.

=head1 WRITING PLUGINS

What's actually going on in the above is that C<@RT::MailPlugins> is a
list of Perl modules; RT prepends C<RT::Interface::Email::> to the name,
to form a package name, and then C<use>'s this module. The module is
expected to provide a C<GetCurrentUser> subroutine, which takes a hash of
several parameters:

=over 4

=item Message

A C<MIME::Entity> object representing the email

=item CurrentUser

An C<RT::CurrentUser> object

=item AuthStat

The authentication level returned from the previous plugin.

=item Ticket [OPTIONAL]

The ticket under discussion

=item Queue [OPTIONAL]

If we don't already have a ticket id, we need to know which queue we're talking about

=item Action

The action being performed. At the moment, it's one of "comment" or "correspond"

=back 4

It returns two values, the new C<RT::CurrentUser> object, and the new
authentication level. The authentication level can be zero, not allowed
to communicate with RT at all, (a "permission denied" error is mailed to
the correspondent) or one, which is the normal mode of operation.
Additionally, if C<-1> is returned, then the processing of the plug-ins
stops immediately and the message is ignored.

=cut
